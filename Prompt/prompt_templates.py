# coding:utf-8
# @File  : prompt_templates.py
# @Author: ganchun
# @Date  :  2025/04/14
# @Description: 提示词模板

translate_prompt = """
    请你担任AI领域的技术翻译专家，负责对英文技术文档进行专业翻译与结构化处理。具体要求如下：
    
    一、核心任务  
    精准翻译技术文档内容，同时按照指定格式整理输出，确保技术细节准确、格式规范统一。
    
    二、具体要求  
    1. 引用处理：删除所有括号内的文献引用内容（如作者名、年份等），保留核心技术描述。  
    2. 图表处理：若段落涉及图片或者表格，需用简洁中文总结图表中核心数据或结论，确保逻辑连贯。
    3. 格式统一：严格遵循原文章节结构（标题、子标题、段落），不得改变原文层级关系或删除关键技术术语。
    4. 输出规范：  
        采用CSV格式，列名固定为：章节标题，子标题，内容  
        无副标题时，子标题字段留空（如“第三章 模型架构,,内容...”）  
        同一章节标题/子标题下的内容以一整个段落形式连贯呈现，占CSV文件的一行，原文若出现换行请用`\n`替换，不添加额外符号。
    
    三、参考格式示例  
    请严格按照以下纯文本格式输出，无需任何引号或多余标记：
        第二章 预训练,,以下提供Qwen2系列的关键配置信息。\nQwen2系列包括5种规模的模型
        第二章 预训练,2.1 数据,数据的规模已被证明是开发稳健大型语言模...
        第二章 预训练,2.2 分词,词汇设计显著影响训练效率和下游任务性能...
    
    请基于上述要求对下列内容进行处理，确保技术严谨性与格式规范性的统一。
    {input_text}
"""

semantic_segment_prompt = """
    你是一名资深文本处理专家，擅长通过语义分析实现信息结构化。
    当前任务是将长段落拆分为具有完整语义的文本块，需确保每个块独立表达清晰思想，且上下文衔接自然。
    现在为你提供一份关于AI知识的长段落，请你基于语义完整性切分为若干内容块，每块控制在300-500字，确保分块后内容逻辑连贯，无语义中断。
    我的要求如下：
        1.分块依据：以完整语义单元（如完整理论阐述、技术流程、案例分析等）为分界点，禁止生硬按字数截断。
        2.字数控制：单块内容需满足 300-500 字，允许在分块衔接处微调语句（如补充过渡句、简化复杂表述），确保上下文自然衔接。
        3.语义检查：每块需包含独立完整的核心信息（如概念定义 + 原理分析、技术优势 + 应用场景等组合），避免拆分导致关键信息缺失。
    下方是为你提供的回答格式，你的回答格式严格按照标准JSON格式，无需额外生成原始段落：  
        {{
            "块1":"...",
            "块2":"...",
            "块3":"..."
            ...
        }}
    这是为你提供的长段落：
        {input_text}
"""

# 生成块摘要和块标签
bi_intent_mapping_prompt = """ 
    你是一名知识库构建专家，需根据给定的结构化文本块生成检索用的摘要和标签。
    输入为包含“章节标题”、“副标题”（可能为空）、“内容”三个字段的JSON数据，输出需满足以下要求：  
    
    一、内容摘要生成（≤100字）  
        1. 深度理解：基于“内容”全文进行语义提炼，保留核心技术逻辑、关键方法或核心结论，避免简单复述标题。  
        2. 细节处理：  
            - 严格规避具体数量词（如“100万”“40种”等），但需完整保留技术标号（如“Qwen2.5”“Qwen2.5-Math”）。  
            - 优先提取技术创新点、核心策略及多任务优化方向，语言保持客观精炼。  
        3. 检索适配：包含技术术语或核心概念（如“长序列生成”“思维链数据”），便于后续与用户查询做语义匹配。  
    
    二、问答标签生成（≤3个）  
        1. 陈述句形式：标签需以名词短语或核心策略陈述呈现，禁止使用疑问句（如“监督微调阶段的关键改进方向”“Qwen2.5长序列生成能力优化方法”）。  
        2. 标题融合：  
            - 必须包含“章节标题”关键词，若存在“副标题”，需将其核心信息融入标签（如副标题“长序列生成”可生成“Qwen2.5长序列生成能力优化”）。  
            - 标签结构建议：[章节/副标题核心词]+[技术点/方法/优势]（如“监督微调阶段关键改进方向”“多语言编码能力强化策略”）。  
        3. 精准覆盖：每个标签需对应内容中的独立知识点（如技术模块、优化策略、数据构建方法），避免重复，且能直接指向内容可解答的具体范畴（如“模型训练配置”对应内容中的学习率、序列长度等参数描述）。  
    
    下面我为你提供一个输入和输出示例：

        输出示例（JSON）：  
        {{  
            "摘要": "",  
            "标签": ["标签1","标签2","标签3"]  
        }}
        
    现在请你基于上述要求，针对下列输入文本进行生成： 
        {input_text}
"""

build_SFT_data_prompt_1 = """
    你是一名QA对生成专家，擅长根据技术文档内容生成层次丰富的问答对。请根据用户提供的Qwen模型技术报告片段，完成以下任务：
    请你针对每个输入内容片段，生成若干组 question-answer（QA）对，除特定名词外，均使用中文进行输出。这些问答对最好有点思考过程，不需要那种直接就可找到答案的问答对，其他规则如下：
        1.问题分类：
            简单问题：面向初学者，聚焦基础概念、定义或直接事实（如 是什么/如何/什么时候 类基础提问）。需使用直白句式，避免技术术语嵌套，例如 “Qwen 模型的核心架构由哪些部分组成？”。。
            复杂问题：面向专业学者，涉及原理分析、对比评估、技术应用等深度逻辑（如 “为什么/比较/解释” 类高阶提问）。需结合行业背景或技术演进趋势，例如 “从 Transformer 架构设计角度，Qwen-2 如何平衡长序列处理的效率与精度？”。
        2.问题生成原则：
            简单问题贴近 “零基础读者的直观疑惑”，需覆盖内容中的基础名词、核心数据、版本差异等直观信息（如参数量、上下文窗口长度、训练数据规模）。
            复杂问题体现 “领域专家的研究视角”，需围绕技术瓶颈（如长序列计算复杂度）、优化动机（如提升多语言泛化能力）、应用场景（如代码生成效率）等维度展开，可基于内容中的技术点合理延伸提问（如从 “长序列生成” 联想到 “长序列对模型性能的影响”，或从 “旋转位置编码优化” 延伸至 “位置编码机制对上下文连贯性的作用原理”）。
            若内容涉及多版本对比（如 Qwen-1 vs Qwen-2），需强制生成至少 1 组对比类复杂问题（如 “Qwen-2 与 Qwen-1的架构有什么不同？ ”）。
        3.答案生成原则：
            答案需优先基于用户提供的文本内容，直接引用原文表述，允许适度简化但不改变原意。
            禁止编造无依据的信息，确保答案与问题严格对应。
            复杂问题答案需分点阐述逻辑链条，可引入技术术语但需保持可读性。尽可能多的生成不重复的问答对。
        4.输出格式：
            以 JSON 数组形式输出，每个元素包含question（问题）、difficulty（难度，值为simple或complex）、answer（答案）三个字段，元素间通过换行分隔。示例如下：
            [  
                {{  
                    "question": "Qwen-2支持的最大上下文窗口长度是多少？",  
                    "difficulty": "simple",  
                    "answer": "Qwen-2通过优化旋转位置编码（RoPE），支持最长128K的上下文窗口。"  
                }},  
                {{  
                    "question": "为何Qwen-2在长序列处理中引入局部敏感哈希（LSH）？",  
                    "difficulty": "complex",  
                    "answer": "传统Transformer的注意力机制计算复杂度为O(n²)，在处理长序列时会导致内存占用激增和推理速度下降。Qwen-2通过LSH将计算复杂度降至O(n log n)，在保持语义理解精度的前提下显著提升长文本处理效率。"  
                }}  
            ]
以下是为你提供的内容片段，一定要记住，不要生成无脑简单的问答，最好是模仿初学者和专家来生成问答：
{input_text}
"""

build_SFT_data_prompt_2 = """
    你是一名QA对生成专家，擅长根据技术文档内容生成层次丰富的问答对。请根据用户提供的Qwen模型技术报告片段，完成以下任务：
    请根据提供的长文本内容，生成尽可能多的问答对（QA），除特定名词外，均使用中文输出。这些问答对最好有点思考过程，不需要那种直接就可找到答案的问答对，其他规则如下：
        1.问题分类：
            简单问题：面向初学者，聚焦基础概念、定义或直接事实（如 “是什么/如何/什么时候”基础提问）。需使用直白句式，避免技术术语嵌套，例如 “Qwen 模型的核心架构由哪些部分组成？”。。
            复杂问题：面向专业学者，涉及原理分析、对比评估、技术应用等深度逻辑（如 “为什么/比较/解释” 类高阶提问）。需结合行业背景或技术演进趋势，例如 “从 Transformer 架构设计角度，Qwen-2 如何平衡长序列处理的效率与精度？”。
        2.问题生成原则：
            简单问题贴近 “零基础读者的直观疑惑”，需覆盖内容中的基础名词、核心数据、版本差异等直观信息（如参数量、上下文窗口长度、训练数据规模）。
            复杂问题体现 “领域专家的研究视角”，需围绕技术瓶颈（如长序列计算复杂度）、优化动机（如提升多语言泛化能力）、应用场景（如代码生成效率）等维度展开，可基于内容中的技术点合理延伸提问（如从 “长序列生成” 联想到 “长序列对模型性能的影响”，或从 “旋转位置编码优化” 延伸至 “位置编码机制对上下文连贯性的作用原理”）。
            若内容涉及多版本对比（如 Qwen-1 vs Qwen-2），需强制生成至少 1 组对比类复杂问题（如 “Qwen-2 与 Qwen-1的架构有什么不同？ ”）。
        3.答案生成原则：
            答案需优先基于用户提供的文本内容，直接引用原文表述，允许适度简化但不改变原意。
            禁止编造无依据的信息，确保答案与问题严格对应。
            复杂问题答案需分点阐述逻辑链条，可引入技术术语但需保持可读性。尽可能多的生成不重复的问答对。
        4.输出格式：
            以 JSON 数组形式输出，每个元素包含question（问题）、difficulty（难度，值为simple或complex）、answer（答案）三个字段，元素间通过换行分隔。示例如下：
            [  
                {{  
                    "question": "Qwen-2支持的最大上下文窗口长度是多少？",  
                    "difficulty": "simple",  
                    "answer": "Qwen-2通过优化旋转位置编码（RoPE），支持最长128K的上下文窗口。"  
                }},  
                {{  
                    "question": "为何Qwen-2在长序列处理中引入局部敏感哈希（LSH）？",  
                    "difficulty": "complex",  
                    "answer": "传统Transformer的注意力机制计算复杂度为O(n²)，在处理长序列时会导致内存占用激增和推理速度下降。Qwen-2通过LSH将计算复杂度降至O(n log n)，在保持语义理解精度的前提下显著提升长文本处理效率。"  
                }}  
            ]
    以下是为你提供的内容片段，一定要记住，不要生成无脑简单的问答，最好是模仿初学者和专家来生成问答：
{input_text}
"""

data_enhance_prompt = """
    请你对我提供的问答数据进行处理，语言使用中文：

    1.先评估每条问答对的质量。对于质量不高的（如问题过于简单、答案信息量不足等），依据你自身的知识进行修订，增加问题的复杂度和深度，让答案更丰富全面，不能只是简单修改。
    2.对于质量较高的问答对，进行数据增强。可采用同义词改写、正话反说、调整句式结构等方法，每条高质量问答对至少生成 3-5 条新的数据。

    你的输出格式以 JSON 数组形式输出，每个元素包含question（问题）、difficulty（难度，值为simple或complex）、answer（答案）三个字段，元素间通过换行分隔。示例如下：
        [  
            {{  
                "question": "Qwen-2支持的最大上下文窗口长度是多少？",  
                "difficulty": "simple",  
                "answer": "Qwen-2通过优化旋转位置编码（RoPE），支持最长128K的上下文窗口。"  
            }},  
            {{  
                "question": "为何Qwen-2在长序列处理中引入局部敏感哈希（LSH）？",  
                "difficulty": "complex",  
                "answer": "传统Transformer的注意力机制计算复杂度为O(n²)，在处理长序列时会导致内存占用激增和推理速度下降。Qwen-2通过LSH将计算复杂度降至O(n log n)，在保持语义理解精度的前提下显著提升长文本处理效率。"  
            }}  
        ]
    我为你提供的问答数据如下：
    {input_text}
"""

query_rewrite_prompt = """
    你是一个专业的查询改写助手，你的任务是将用户的原始查询进行情境分析和改写，以便于后续检索和回答。请按照以下步骤处理：

    1. 分析问题情境：根据提供的历史对话记录(history_conversation)和原始查询，判断用户的问题情境。如果没有历史对话，则主要基于原始查询判断。
    2. 情境改写：使用分治策略将原始查询拆解为一系列子查询，这些子查询应当：可按顺序解决可以最终解决原始查询；尽量保留问题情境；合适的粒度和数量(通常3-5个)
    3. 生成关键查询：对原始查询进行改写和总结，生成一个关键查询，该查询应：不包含问题情境；便于后续检索；清晰准确地表达查询意图
    4. 问题分类：将原始查询分类为以下类型之一：
        信息查询：寻求事实信息的问题
        概念解释：请求解释某个概念、术语的问题
        操作指导：如何做某事的问题
        对比总结：请求比较不同事物的问题
        开放讨论：需要观点或看法的开放性问题
        其他：不属于以上类别的问题
    5. 判断是否需要检索：判断解答该查询是否需要检索外部知识。如果普通LLM已有足够知识可回答，则为false；如果需要特定或专业知识，则为true。
    
    请以JSON格式输出结果，以下是一个具体示例，你的输出需按照以下格式：
    {{
        "原始查询": "比较Qwen2.5和Qwen1.5模型架构",
        "问题性质": "对比总结",
        "子查询序列": [
                "Qwen1.5模型架构",
                "Qwen2.5模型架构",
                "Qwen2.5和Qwen1.5模型架构有什么不同"
            ],
        "关键查询": "Qwen2.5和Qwen1.5模型架构对比",
        "是否检索": true
    }}

这是你需要进行改写的原始查询：
{input_text}
请确保输出的JSON格式正确，可以被直接解析。
"""

answer_with_kb_prompt = """
你是一个专业的知识问答助手，擅长基于检索到的知识片段回答用户问题。你需要理解用户查询的结构化分解，并根据检索到的知识提供全面准确的回答。

    任务说明，你将收到以下信息：
    1. 用户的原始查询
    2. 查询分解结果（包括关键查询和子查询序列）
    3. 基于关键查询检索到的知识片段
    
    你的回答需按照以下要求：
        1. 查询结构理解：分析子查询序列的逻辑顺序，理解它们如何共同解决原始查询；把握关键查询所代表的核心信息需求
        2. 知识整合策略：为每个子查询找到相关的知识片段；按照子查询的逻辑顺序组织信息；识别并解决知识片段间可能存在的矛盾或重叠
        3. 回答要求：结构化呈现：按照子查询的逻辑顺序组织回答；知识依据：每个观点必须基于提供的知识片段，不要生成无依据的信息；语言清晰：使用专业但易懂的语言，必要时解释技术术语；完整性：确保覆盖原始查询的各个方面，对无法从知识片段中找到的信息坦诚说明
        4. 格式指南：如果回答较长，使用小标题或编号列表增强可读性；对于复杂概念，可用对比或类比方式解释；对于步骤性内容，使用有序列表清晰展示

请根据以上指导，分析用户查询和提供的知识片段，生成一个系统性、全面且有依据的回答。
这是我为你提供的原始查询：{input_query}
查询分解结果：{input_query_rewrite_result}
知识片段：
{input_context}
"""

naive_rag_prompt = """
    你是一个专业、友好的智能助手。请根据提供的参考资料回答用户问题。
    如果参考资料中没有相关信息，请基于你的知识谨慎回答，回答应当准确、清晰，并尽量使用参考资料中的原文表述。
    不要在回答中直接提及参考资料编号，要自然地融入信息。
"""

doubao_rag_prompt = """
    你是一个专业、友好的智能助手。我将提供原始查询、子查询序列、关键查询及对应的检索结果。其中：

    子查询序列：基于分治策略将原始查询拆解为可独立检索的子问题，用于逐层细化分析；
    关键查询：对原始查询核心需求的提炼与总结，用于确保回答不偏离问题本质。

    请按以下步骤执行推理：
    1.明确子查询序列的作用：通过分解原始问题为可独立检索的子问题，逐步获取细节信息；
    2.明确关键查询的作用：聚焦原始问题核心，确保回答不偏离本质；
    3.综合所有子查询与关键查询的检索结果，形成对原始查询的完整回答。

    请严格按照以下 JSON 格式返回结果，确保 “推理过程” 字段包含完整的分步思考记录，“最终回答” 字段为综合所有信息的结论：
    {{
        "推理过程":"",
        "最终回答":""
    }}
    
    以下是为你提供的信息：
    原始查询：{original_query}
    子查询序列：{sub_query_list}
    关键查询：{key_query}
    检索结果：{retrieved_results}
"""

tct_first_prompt = """
    你是一个专业、友好的智能助手。请根据我提供的原始查询、子查询序列（基于分治策略改写）、关键查询（原始查询的改写总结）及对应检索结果，执行以下操作：

    1.逐一验证每个子查询及其检索结果的匹配度，判断检索结果是否能完整解答该子查询；
    2.单独验证关键查询与其检索结果的匹配度（将关键查询视为特殊子查询）；
    3.若所有子查询（含关键查询）均能通过检索结果完整解决，返回：
        {{
            "是否可以解决": true,
            "回答": "基于所有检索结果生成的最终回答内容",
            "无法解决的子查询": [],
            "请确认": "confirm"
        }}
    4.若存在任意子查询（含关键查询）无法通过检索结果解决，返回：
        {{
            "是否可以解决": false,
            "回答": "",
            "无法解决的子查询": ["无法解决的子查询文本 1", "无法解决的子查询文本 2",...（需包含关键查询若其未解决）],
            "请确认": "confirm"
        }}
    以下是为你提供的信息，请严格遵循上述逻辑和 JSON 格式返回结果。
    原始查询：{original_query}
    子查询序列：{sub_query_list}
    关键查询：{key_query}
    检索结果：{retrieved_results}
"""

tct_second_prompt = """
    你是一个专业、友好的智能助手。请根据我提供的原始查询、子查询序列（基于分治策略改写）、关键查询（原始查询的改写总结）及对应检索结果，包括基于上述内容得到的回答，执行以下操作：
    1.分治策略延续性推理：
    基于原始分治路径（子查询序列 + 关键查询），验证第一次回答是否遵循 “子查询→检索结果→整合” 的逻辑链条，检查是否存在子路径断裂（如某子查询结论未在回答中体现），并确认关键查询的核心结论是否完整呈现且与子查询结果形成逻辑闭环。
    2.自我反思触发规则：若出现以下任意情况，判定为 “未完整解决原始查询”：
        分治路径中存在未被回答的子查询（显性缺口）；
        回答中各子查询结论存在逻辑冲突，未通过检索结果校准（隐性缺口）；
        关键查询的结论缺乏子查询支撑，或未覆盖原始问题的核心维度（全局缺口）。
    3.若判定为已解决，请返回以下json格式：
        {{  
            "处理状态": "完成",  
            "回答": "第一次回答内容"  
        }}
    4.若判定为未解决，请返回以下json格式：
        {{  
            "处理状态": "未完成", 
            "补充查询": ["补充查询1", "补充查询2", ...],  
        }}
    以下是我为你提供的信息，请严格遵循上述逻辑和 JSON 格式返回结果。
"""

if __name__ == "__main__":
    # 示例用法
    text = "测试"
    # print(translate_prompt.format(input_text=text))
    print(semantic_segment_prompt.format(input_text=text))
