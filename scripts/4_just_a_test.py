# coding:utf-8
# @File  : 4_just_a_test.py
# @Author: ganchun
# @Date  :  2025/04/17
# @Description: 
#
import json

from use_doubao_api import use_doubao_api
from Prompt.prompt_templates import semantic_segment_prompt

def test_semantic_segment():
    test_string = """
        第四章 训练后处理,4.1 监督微调,在本节中，我们详细介绍Qwen2.5监督微调阶段的关键改进，聚焦于几个关键领域：\n（1）长序列生成：Qwen2.5能够生成高质量内容，输出上下文长度可达8192token，这是对典型训练后响应长度（通常保持在2000token以下）的重大提升。为解决这一差距，我们开发了长响应数据集。我们采用反向翻译技术从预训练语料库生成长文本数据查询，施加输出长度约束，并使用Qwen2过滤低质量配对数据。\n（2）数学：我们引入Qwen2.5-Math的思维链数据，其涵盖多样的查询来源，包括公共数据集、K-12问题集和合成问题。为确保高质量推理，我们采用拒绝采样以及奖励建模和带注释的答案进行指导，生成分步推理过程。\n（3）编码：为增强编码能力，我们整合了Qwen2.5-Coder的指令微调数据。我们将多种语言特定代理纳入协作框架，生成近40种编程语言的多样化高质量指令对。通过从代码相关问答网站合成新示例并从GitHub收集算法代码片段来扩展我们的指令数据集。使用全面的多语言沙箱进行静态代码检查，并通过自动化单元测试验证代码片段，确保代码质量和正确性。\n（4）指令跟随：为确保高质量的指令跟随数据，我们实施严格的基于代码的验证框架。在此方法中，大语言模型生成指令和相应的验证代码，以及用于交叉验证的全面单元测试。通过基于执行反馈的拒绝采样，我们精心筛选用于监督微调的训练数据，从而保证模型忠实遵循预期指令。\n（5）结构化数据理解：我们开发了全面的结构化理解数据集，涵盖传统任务（如表格问答、事实验证、错误纠正和结构理解）以及涉及结构化和半结构化数据的复杂任务。通过将推理链纳入模型响应，我们显著增强其从结构化数据推断信息的能力，从而提升跨这些多样化任务的性能。这种方法不仅拓宽了数据集的范围，还深化了模型从复杂数据结构中推理和获取有意义见解的能力。\n（6）逻辑推理：为增强模型的逻辑推理能力，我们引入了跨越多个领域的70000个新查询，包括选择题、是非题和开放式问题。模型经过训练以系统方式处理问题，运用演绎推理、归纳概括、类比推理、因果推理和统计推理等多种推理方法。通过迭代优化，我们系统过滤包含错误答案或有缺陷推理过程的数据，逐步增强模型逻辑推理的准确性，确保在不同类型推理任务上的稳健性能。\n（7）跨语言迁移：为促进模型通用能力的跨语言迁移，我们使用翻译模型将高资源语言的指令转换为各种低资源语言，生成相应的响应候选。为确保这些响应的准确性和一致性，我们评估每种多语言响应与其原始对应内容的语义对齐，保留原始响应的逻辑结构和风格细节，从而在不同语言间保持其完整性和连贯性。\n（8）稳健系统指令：我们构建了数百个通用系统提示，以提高训练后系统提示的多样性，确保系统提示与对话之间的一致性。不同系统提示的评估显示，模型保持良好性能并减少方差，表明稳健性有所提升。\n（9）响应过滤：为评估响应质量，我们采用多种自动标注方法，包括专用批评模型和多代理协作评分系统。响应经过严格评估，只有被所有评分系统认定为无缺陷的响应才会被保留，这种全面方法确保我们的输出保持最高质量标准。\n最终，我们构建了包含超过100万监督微调示例的数据集。模型在序列长度为32768token的情况下进行了两个epoch的微调。为优化学习，学习率从7×10^-6逐步降至7×10^-7。为解决过拟合问题，我们应用0.1的权重衰减，并将梯度范数裁剪至最大值1.0。
    """
    prompt = semantic_segment_prompt.format(input_text=test_string)
    print(prompt)
    api_key = "ce6fac43-3d59-4dfe-8949-ea1029f42a32"
    response = use_doubao_api(api_key, prompt)
    print(response)

    json_data = json.loads(response)
    result = list(json_data.values())
    print(result)

if __name__ == "__main__":
    test_semantic_segment()